package dev.teamproject.meeting;

import dev.teamproject.common.CommonTypes;
import dev.teamproject.user.User;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * This service handles the business logic related to
 * meeting entities.
 */
@Service
public class MeetingService {
  private final MeetingRepo meetingRepo;

  @Autowired
  public MeetingService(MeetingRepo meetingRepo) {
    this.meetingRepo = meetingRepo;
  }

  public MeetingDTO findById(int mid) {
    Meeting meeting = meetingRepo.findById(mid)
            .orElseThrow(() -> throwMeetingNotFoundException(mid));
    return convertToDTO(meeting); // Convert to MeetingDTO before returning
  }
  //TODO: more business logics

  public List<MeetingDTO> findAll() {

    return meetingRepo.findAllByOrderByMidDesc().stream()
            .map(this::convertToDTO)  // Convert each Meeting to MeetingDTO
            .collect(Collectors.toList());
  }

  public List<MeetingDTO> findByOrganizer(User organizer) {
    return meetingRepo.findByOrganizer(organizer).stream()
            .map(this::convertToDTO) // Convert each Meeting to MeetingDTO
            .collect(Collectors.toList());
  }

  public List<MeetingDTO> findByRecurrence(CommonTypes.Recurrence recurrence) {
    return meetingRepo.findByRecurrence(recurrence).stream()
            .map(this::convertToDTO)
            .collect(Collectors.toList());
  }

  public List<MeetingDTO> findByStatus(CommonTypes.MeetingStatus status) {
    return meetingRepo.findByStatus(status).stream()
            .map(this::convertToDTO)
            .collect(Collectors.toList());
  }

  public List<MeetingDTO> findByType(CommonTypes.MeetingType type) {
    return meetingRepo.findByType(type).stream()
            .map(this::convertToDTO)
            .collect(Collectors.toList());
  }

  /**
   * Delete a meeting by requesting a meeting id.
   */

  public void deleteMeeting(int mid) {
    if (!meetingRepo.existsById(mid)) {
      throwMeetingNotFoundException(mid);
    }
    meetingRepo.deleteById(mid);
  }

  // Overloaded save method to handle MeetingDTO
  public void save(Meeting meeting) {
    meetingRepo.save(meeting);
  }

  public void saveDTO(MeetingDTO meetingDTO) {
    Meeting meeting = convertFromDTO(meetingDTO);
    meetingRepo.save(meeting);
  }

  public MeetingDTO convertToDTO(Meeting meeting) {
    MeetingDTO dto = new MeetingDTO(
            meeting.getMid(),
            meeting.getOrganizer(),
            meeting.getType(),
            meeting.getDescription(),
            meeting.getStartTime(),
            meeting.getEndTime(),
            meeting.getRecurrence(),
            meeting.getCreatedAt(),
            meeting.getInviteParticipant(),
            meeting.getAcceptParticipant(),
            meeting.getStatus()
    );
    return dto;
  }

  public Meeting convertFromDTO(MeetingDTO dto) {
    Meeting meeting = new Meeting();
    meeting.setMid(dto.getMid()); // Only set this if necessary, as IDs are often generated by the database
    meeting.setOrganizer(dto.getOrganizer());
    meeting.setType(dto.getType());
    meeting.setDescription(dto.getDescription());
    meeting.setStartTime(dto.getStartTime());
    meeting.setEndTime(dto.getEndTime());
    meeting.setRecurrence(dto.getRecurrence());
    meeting.setCreatedAt(dto.getCreatedAt());
    meeting.setInviteParticipant(dto.getInviteParticipant());
    meeting.setAcceptParticipant(dto.getAcceptParticipant());
    meeting.setStatus(dto.getStatus());

    return meeting;
  }

  private NoSuchElementException throwMeetingNotFoundException(int mid) {
    throw new NoSuchElementException("Meeting not found with id: " + mid);
  }
}